// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using PhotoSharing.Data.Context;

#nullable disable

namespace PhotoSharing.Data.Migrations
{
    [DbContext(typeof(ApplicationContext))]
    [Migration("20231018161523_InitMigration")]
    partial class InitMigration
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.12")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("PhotoSharing.Core.Models.Auth.Role", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<DateTime?>("Created")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created");

                    b.Property<DateTime?>("Modified")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("modified");

                    b.Property<string>("Name")
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.HasKey("Id");

                    b.ToTable("roles", "auth");

                    b.HasData(
                        new
                        {
                            Id = new Guid("ddd42cbe-45e3-42f4-975e-cb393c6849d2"),
                            Name = "admin"
                        },
                        new
                        {
                            Id = new Guid("31e53e1e-a297-4b88-8f06-bcd8aa120a43"),
                            Name = "user"
                        });
                });

            modelBuilder.Entity("PhotoSharing.Core.Models.Auth.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<DateTime?>("Created")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created");

                    b.Property<string>("Email")
                        .HasColumnType("text")
                        .HasColumnName("email");

                    b.Property<DateTime?>("Modified")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("modified");

                    b.Property<string>("Name")
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("text")
                        .HasColumnName("password_hash");

                    b.Property<string>("RefreshToken")
                        .HasColumnType("text")
                        .HasColumnName("refresh_token");

                    b.Property<DateTime?>("RefreshTokenCreatingDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("token_created");

                    b.Property<DateTime?>("RefreshTokenExpiringDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("token_expires");

                    b.Property<Guid?>("RoleId")
                        .HasColumnType("uuid")
                        .HasColumnName("role_id");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("users", "auth");

                    b.HasData(
                        new
                        {
                            Id = new Guid("ddd42cbe-45e3-42f4-975e-cb393c6849d2"),
                            Email = "admin@mail.ru",
                            PasswordHash = "AQAAAAIAAYagAAAAEHj+dVtu6yhxua4sIZqEA4EDQNSMuk2/N2piziPI/Be57MO4YB1zE0XJ/Ck9N/VHbQ==",
                            RoleId = new Guid("ddd42cbe-45e3-42f4-975e-cb393c6849d2")
                        },
                        new
                        {
                            Id = new Guid("31e53e1e-a297-4b88-8f06-bcd8aa120a43"),
                            Email = "user@mail.ru",
                            PasswordHash = "AQAAAAIAAYagAAAAEPo832kV1urxkBmYo2kDrEpCAe6ZAu5Nl00vkU5susJOicekTQyk/8QKLWdVUjtiAg==",
                            RoleId = new Guid("31e53e1e-a297-4b88-8f06-bcd8aa120a43")
                        });
                });

            modelBuilder.Entity("PhotoSharing.Core.Models.Common.FileInfo", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<DateTime?>("Created")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created");

                    b.Property<string>("FileName")
                        .HasColumnType("text")
                        .HasColumnName("file_name");

                    b.Property<byte>("MimeType")
                        .HasColumnType("smallint")
                        .HasColumnName("mime_type");

                    b.Property<DateTime?>("Modified")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("modified");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid")
                        .HasColumnName("user_id");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("file_infos", "common");
                });

            modelBuilder.Entity("PhotoSharing.Core.Models.Social.Friendship", b =>
                {
                    b.Property<Guid>("UserFirstId")
                        .HasColumnType("uuid")
                        .HasColumnName("user_first_id");

                    b.Property<Guid>("UserSecondId")
                        .HasColumnType("uuid")
                        .HasColumnName("user_second_id");

                    b.HasKey("UserFirstId", "UserSecondId");

                    b.HasIndex("UserSecondId");

                    b.ToTable("Friendships");
                });

            modelBuilder.Entity("PhotoSharing.Core.Models.Auth.User", b =>
                {
                    b.HasOne("PhotoSharing.Core.Models.Auth.Role", "Role")
                        .WithMany("Users")
                        .HasForeignKey("RoleId");

                    b.Navigation("Role");
                });

            modelBuilder.Entity("PhotoSharing.Core.Models.Common.FileInfo", b =>
                {
                    b.HasOne("PhotoSharing.Core.Models.Auth.User", "User")
                        .WithMany("Files")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("PhotoSharing.Core.Models.Social.Friendship", b =>
                {
                    b.HasOne("PhotoSharing.Core.Models.Auth.User", "UserFirst")
                        .WithMany("Subscriptions")
                        .HasForeignKey("UserFirstId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("PhotoSharing.Core.Models.Auth.User", "UserSecond")
                        .WithMany("Subscribers")
                        .HasForeignKey("UserSecondId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("UserFirst");

                    b.Navigation("UserSecond");
                });

            modelBuilder.Entity("PhotoSharing.Core.Models.Auth.Role", b =>
                {
                    b.Navigation("Users");
                });

            modelBuilder.Entity("PhotoSharing.Core.Models.Auth.User", b =>
                {
                    b.Navigation("Files");

                    b.Navigation("Subscribers");

                    b.Navigation("Subscriptions");
                });
#pragma warning restore 612, 618
        }
    }
}
